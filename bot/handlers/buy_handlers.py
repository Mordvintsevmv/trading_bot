from main import bot
from config.personal_data import get_account
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from trading.get_account_info import get_currency_sing
from main import dp
from aiogram.types import Message
from bot.keyboards.start_menu_keyboard import get_start_menu
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup
from aiogram import types
from trading.trade_help import in_lot_figi
from trading.trade_help import get_price_figi
from trading.place_order import buy_order
from trading.check_av import check_time
from config.personal_data import get_account_type
from trading.get_securities import get_security_list

"""

    –¢—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—á–∞—é—Ç –∑–∞ –ø—Ä–æ–¥–∞–∂—É –±—É–º–∞–≥

"""

"""
    –°–æ–∑–¥–∞—ë–º —Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
"""


class SearchSFB(StatesGroup):
    wait_sfb = State()


class BuyOrder(StatesGroup):
    b_wait_figi = State()
    b_wait_quantity = State()
    b_wait_price = State()


"""
    –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –±—É–º–∞–≥
"""


@dp.message_handler(text="–ö—É–ø–∏—Ç—å")
async def start_buy(message):
    await bot.send_message(chat_id=message.from_user.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–º–∞–≥–∏ –∏–ª–∏ FIGI:")
    await SearchSFB.wait_sfb.set()


"""
    –ü–æ–∏—Å–∫ –±—É–º–∞–≥ –Ω–∞ –ø–æ–∫—É–ø–∫—É
"""


@dp.message_handler(state=SearchSFB.wait_sfb)
async def search_security_buy(message: Message, state: FSMContext):
    security_list = get_security_list(user_id=message.from_user.id, name=message.text)
    if len(security_list) != 0:
        for security in security_list:

            choose_share_keyboard = InlineKeyboardMarkup()
            choose_share_keyboard.add(
                InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å", callback_data=f"buy:figi:{security.figi}"))

            await message.answer(
                text=
                f"üßæ<b>{security.name}</b>\n"
                f"FIGI: {security.figi}\n\n"
                f"–ë—É–º–∞–≥ –≤ –ª–æ—Ç–µ: {security.lot}\n"
                f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –±—É–º–∞–≥–∏: {round(get_price_figi(user_id=message.from_user.id, figi=security.figi), 4)}{get_currency_sing(security.currency)}\n"
                f"–ò—Ç–æ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å: {round(security.lot * get_price_figi(user_id=message.from_user.id, figi=security.figi), 4)}{get_currency_sing(security.currency)}\n"
                , reply_markup=choose_share_keyboard)

            await state.finish()
    else:
        await bot.send_message(chat_id=message.from_user.id, text=f"–¢–∞–∫–æ–π –±—É–º–∞–≥–∏ –Ω–µ—Ç!")
        await bot.send_message(chat_id=message.from_user.id, text=f"–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞':")
        return 0


"""
    –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–æ—Ç–æ–≤
"""


@dp.callback_query_handler(lambda c: c.data and c.data.startswith("buy:figi"))
async def b_choose_quantity(callback_query, state: FSMContext):

    data = callback_query.data.split(":")
    figi = data[2]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –æ–Ω–∞ —Å–µ–π—á–∞—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    if check_time(user_id=callback_query.from_user.id, figi=figi)[0] or get_account_type(
            user_id=callback_query.from_user.id) == "sandbox":

        # –ó–∞–ø–∏—à–µ–º –≤ –ø–∞–º—è—Ç—å
        await state.update_data(b_chosen_figi=figi)

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –ª–æ—Ç–æ–≤
        lot_keyboard = ReplyKeyboardMarkup()
        lot_keyboard.add(f"1")
        lot_keyboard.add(f"2")
        lot_keyboard.add(f"3")
        lot_keyboard.add(f"4")
        lot_keyboard.add(f"–û—Ç–º–µ–Ω–∞")

        # –í—ã–≤–µ–¥–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±—É–º–∞–≥–µ
        price = get_price_figi(figi=figi, user_id=callback_query.from_user.id)

        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=f"–ë—É–º–∞–≥ –≤ –ª–æ—Ç–µ: {in_lot_figi(figi=figi, user_id=callback_query.from_user.id)}\n"
                                    f"–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É–º–∞–≥–∏: {round(price, 6)}\n"
                                    f"–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ—Ç–∞: {round(price * in_lot_figi(figi=figi, user_id=callback_query.from_user.id), 6)}")

        await bot.send_message(chat_id=callback_query.from_user.id, text="–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
                               reply_markup=lot_keyboard)

        # –ü–µ—Ä–µ–π–¥—ë–º –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await BuyOrder.b_wait_quantity.set()
        return
    else:
        await state.reset_state()
        await bot.send_message(chat_id=callback_query.from_user.id, text="–¢–æ—Ä–≥–∏ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏—Å—å!")
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=check_time(user_id=callback_query.from_user.id, figi=figi)[1],
                               reply_markup=get_start_menu(callback_query.from_user.id))


"""
    –¢—Ä–µ—Ç–∏–π —Ö—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ b_wait_quantity
"""


@dp.message_handler(state=BuyOrder.b_wait_quantity)
async def b_choose_price(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if int(message.text) > 0:

        # –ó–∞–ø–∏—à–µ–º –≤ –ø–∞–º—è—Ç—å
        await state.update_data(b_chosen_quantity=message.text)

        user_data = await state.get_data()
        price = get_price_figi(user_data['b_chosen_figi'], user_id=message.from_user.id)

        # –°–æ–∑–¥–∞–¥–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Ü–µ–Ω—ã –Ω–∞ –±—É–º–∞–≥—É
        price_keyboard = ReplyKeyboardMarkup()

        price_keyboard.add(f"–õ—É—á—à–∞—è —Ü–µ–Ω–∞")
        price_keyboard.add(f"{round(price * 1.02, 5)}")
        price_keyboard.add(f"{round(price * 1.01, 5)}")
        price_keyboard.add(f"{round(price * 1.00, 5)}")
        price_keyboard.add(f"{round(price * 0.99, 5)}")
        price_keyboard.add(f"{round(price * 0.98, 5)}")
        price_keyboard.add(f"–û—Ç–º–µ–Ω–∞")

        # –í–∫–ª—é—á–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –±—É–º–∞–≥—É:", reply_markup=price_keyboard)
        await BuyOrder.b_wait_price.set()

    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–≤—Ç–æ—Ä–∏–º –∑–∞–ø—Ä–æ—Å
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ª–æ—Ç–æ–≤!")


"""
    –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ö—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫—É–ø–∞–µ—Ç –±—É–º–∞–≥–∏
"""


@dp.message_handler(state=BuyOrder.b_wait_price)
async def b_finish(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    price = get_price_figi(user_data['b_chosen_figi'], user_id=message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü–∞—Ö
    if message.text == "–õ—É—á—à–∞—è —Ü–µ–Ω–∞":
        await state.finish()
        # –ü—Ä–æ–¥–∞–¥–∏–º –±—É–º–∞–≥–∏ –∏ –≤—ã–≤–µ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            f"–ö—É–ø–∏—Ç—å –∞–∫—Ü–∏–∏ {user_data['b_chosen_figi']} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {user_data['b_chosen_quantity']} –ø–æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ.\n",
            reply_markup=get_start_menu(message.from_user.id))
        buy_order(figi=user_data['b_chosen_figi'], price=0.0,
                  quantity_lots=int(user_data['b_chosen_quantity']), user_id=message.from_user.id)
    elif price * 1.20 > float(message.text) > price * 0.80:
        await state.finish()
        # –ü—Ä–æ–¥–∞–¥–∏–º –±—É–º–∞–≥–∏ –∏ –≤—ã–≤–µ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            f"–ö—É–ø–∏—Ç—å –∞–∫—Ü–∏–∏ {user_data['b_chosen_figi']} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {user_data['b_chosen_quantity']} –ø–æ —Ü–µ–Ω–µ {message.text}.\n",
            reply_markup=get_start_menu(message.from_user.id))
        buy_order(figi=user_data['b_chosen_figi'], price=float(message.text),
                  quantity_lots=int(user_data['b_chosen_quantity']), user_id=message.from_user.id, via="bot", account_id=get_account(user_id=user_data))
    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–≤—Ç–æ—Ä–∏–º –∑–∞–ø—Ä–æ—Å
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É!")
        return
