from trading.get_info import get_all_stat, get_my_order, get_all_currency, get_all_shares
from main import dp, bot
from aiogram.types import Message
from aiogram.dispatcher.filters import Text
from trading.get_by_figi import sfb_name_by_figi
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from trading.place_order import cancel_order
from config.personal_data import get_account_type

"""

    –ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—á–∞—é—Ç –∑–∞ –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—á—ë—Ç–µ

"""

"""

    –ë–∞–ª–∞–Ω—Å

"""


@dp.message_handler(Text(contains="–±–∞–ª–∞–Ω—Å", ignore_case=True))
async def get_balance(message: Message):

    cur_df = get_all_currency(message.from_user.id)

    await message.answer(f"üí∏<b>–î–æ—Å—Ç—É–ø–Ω–∞—è –≤–∞–ª—é—Ç–∞</b>üí∏")

    for i in cur_df.index:

        if cur_df['currency'][i] == "rub":
            await message.answer(
                f"{round(cur_df['sum'][i], 2)}‚ÇΩ")

        elif cur_df['currency'][i] == "usd":
            await message.answer(
                f"{round(cur_df['sum'][i], 2)}$")

        elif cur_df['currency'][i] == "eur":
            await message.answer(
                f"{round(cur_df['sum'][i], 2)}‚Ç¨")

        else:
            await message.answer(
                f"{round(cur_df['sum'][i], 2)} {cur_df['currency'][i]}")

"""

    –ë—É–º–∞–≥–∏

"""


@dp.message_handler(Text(contains="–±—É–º–∞–≥–∏", ignore_case=True))
async def get_share(message: Message):

    sh_df = get_all_shares(message.from_user.id)

    empty_portf = True
    await message.answer(f"üíº–¶–µ–Ω–Ω—ã–µ –±—É–º–∞–≥–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µüíº")

    for i in sh_df.index:

        inst = ""
        name = ""

        if sh_df['instrument'][i] == "share":
            inst = "–ê–∫—Ü–∏–∏"
            name = sfb_name_by_figi(sh_df['figi'][i], user_id=message.from_user.id)
            empty_portf = False

        elif sh_df['instrument'][i] == "bond":
            inst = "–ë–æ–Ω–¥—ã"
            name = sfb_name_by_figi(sh_df['figi'][i], user_id=message.from_user.id)
            empty_portf = False

        elif sh_df['instrument'][i] == "etf":
            inst = "ETF"
            name = sfb_name_by_figi(sh_df['figi'][i], user_id=message.from_user.id)
            empty_portf = False

        elif sh_df['instrument'][i] == "currency":
            continue

        elif sh_df['instrument'][i] == "future":
            inst = "–§—å—é—á–µ—Ä—Å—ã"
            name = sfb_name_by_figi(sh_df['figi'][i], user_id=message.from_user.id)
            empty_portf = False

        if sh_df['exp_yield'][i] >= 0:
            exp_yield = f"–û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: {round(sh_df['exp_yield'][i], 2)}‚ÇΩ"
        else:
            exp_yield = f"–û–∂–∏–¥–∞–µ–º–∞—è —É–±—ã–ª—å: {round(sh_df['exp_yield'][i], 2)}‚ÇΩ"

        await message.answer(
            f"üßæ<b>{inst} {name}</b>\n"
            f"FIGI: {sh_df['figi'][i]}\n\n"
            f"–õ–æ—Ç–æ–≤: {int(sh_df['lots'][i])}\n"
            f"–í—Å–µ–≥–æ: {round(sh_df['quantity'][i], 2)}\n\n"
            f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {sh_df['average_price'][i]}\n"
            f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ FIFO: {sh_df['average_price_fifo'][i]}\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {round(sh_df['current_price'][i], 6)}\n\n"
            f"–ù–ö–î: {sh_df['nkd'][i]}\n"
            f"{exp_yield}\n"
        )

    if empty_portf:
        await message.answer(f"–£ –í–∞—Å –Ω–µ—Ç —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ!")


"""

    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—á—ë—Ç—É

"""


@dp.message_handler(Text(contains="—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", ignore_case=True))
async def get_stat(message: Message):
    await message.answer(f"üìà<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—á—ë—Ç—É</b>üìâ ")

    stat = get_all_stat(message.from_user.id)

    # –ü–æ—Å—á–∏—Ç–∞–µ–º —Å—É–º–º—É –≤—Å–µ—Ö –±—É–º–∞–≥
    sum = stat['sum_total'][0]

    # –ü–µ—Ä–µ–≤–µ–¥—ë–º –¥–æ—Ö–æ–¥/—É–±—ã—Ç–æ–∫ –∏–∑ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ —Ä—É–±–ª–∏
    dif = round(sum - (sum / (100 + stat['exp_yield'][0])) * 100, 2)

    if dif >= 0:
        dif_text = f"<b>–ü—Ä–∏–±–ª—å</b>: {dif}‚ÇΩ ({stat['exp_yield'][0]}%)"
    else:
        dif_text = f"<b>–£–±—ã–ª—å</b>: {dif}‚ÇΩ ({stat['exp_yield'][0]}%)"

    await message.answer(
        f"<b>–ê–∫—Ü–∏–∏</b> –Ω–∞ —Å—É–º–º—É: {stat['sum_shares'][0]}‚ÇΩ\n"
        f"<b>–ë–æ–Ω–¥—ã</b> –Ω–∞ —Å—É–º–º—É: {stat['sum_bonds'][0]}‚ÇΩ\n"
        f"<b>ETF</b> –Ω–∞ —Å—É–º–º—É: {stat['sum_etf'][0]}‚ÇΩ\n"
        f"<b>–í–∞–ª—é—Ç–∞</b> –Ω–∞ —Å—É–º–º—É: {stat['sum_curr'][0]}‚ÇΩ\n"
        f"<b>–§—å—é—á–µ—Ä—Å—ã</b> –Ω–∞ —Å—É–º–º—É: {stat['sum_fut'][0]}‚ÇΩ\n\n"
        f"<b>–ò—Ç–æ–≥–æ</b>: {round(sum, 2)}‚ÇΩ\n"
        f"{dif_text}\n"

    )


'''
    –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
'''


@dp.message_handler(Text(contains="–æ—Ä–¥–µ—Ä", ignore_case=True))
async def get_orders(message: Message):
    ord_df = get_my_order(message.from_user.id)

    await message.answer(f"üìã–û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞üìã")

    for i in ord_df.index:

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=
            [
                [
                    InlineKeyboardButton(text=f"–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä", callback_data=f"ord_id{ord_df['order_id'][i]}"),
                ]
            ],
        )

        if ord_df['direction'][i] == 2:
            dir = "–ü—Ä–æ–¥–∞–∂–∞"
        else:
            dir = "–ü–æ–∫—É–ø–∫–∞"

        if ord_df['currency'][i] == "rub":
            currency = "‚ÇΩ"

        elif ord_df['currency'][i] == "eur":
            currency = "‚Ç¨"

        elif ord_df['currency'][i] == "usd":
            currency = "$"

        else:
            currency = ord_df['currency'][i]

        await message.answer(
            f"‚úÖ<b>{dir}</b> –±—É–º–∞–≥ {sfb_name_by_figi(ord_df['figi'][i], message.from_user.id)}\n"
            f"–û—Ç–∫—Ä—ã—Ç: {ord_df['order_date'][i]}\n\n"
            f"ID: {ord_df['order_id'][i]}\n\n"
            f"FIGI: {ord_df['figi'][i]}\n\n"
            f"–õ–æ—Ç–æ–≤ –∑–∞–ø—Ä–æ—à–µ–Ω–æ: {ord_df['lots_req'][i]}\n"
            f"–õ–æ—Ç–æ–≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ: {ord_df['lots_ex'][i]}\n\n"
            f"–°—É–º–º–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞: {ord_df['sum_req'][i]}{currency}\n"
            f"–°—É–º–º–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ: {ord_df['sum_ex'][i]}{currency}\n\n"
            f"–¶–µ–Ω–∞ –æ–¥–Ω–æ–π –∞–∫—Ü–∏–∏: {round(ord_df['price_one'][i], 6)}{currency}\n\n"
            f"–ö–æ–º–∏—Å—Å–∏—è: {round(ord_df['commission'][i], 3)}{currency}\n"
            f"–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: {round(ord_df['serv_commission'][i], 3)}{currency}\n\n"
            f"–ò—Ç–æ–≥–æ: {ord_df['sum_total'][i]}{currency}\n",
            reply_markup=keyboard
        )


'''
    –ó–∞–∫—Ä—Ç—ã–∏–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ id
'''

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('ord_id'))
async def close_order(callback_query):

    order_id = callback_query.data[6:]

    await cancel_order(order_id, user_id=callback_query.from_user.id)

    await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, text="‚ùå–û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω‚ùå")

